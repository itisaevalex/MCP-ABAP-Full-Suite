"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdtHTTP = exports.session_types = void 0;
const request_1 = __importDefault(require("request"));
const request_debug_1 = __importDefault(require("request-debug"));
const AdtException_1 = require("./AdtException");
const FETCH_CSRF_TOKEN = "fetch";
const CSRF_TOKEN_HEADER = "x-csrf-token";
const SESSION_HEADER = "X-sap-adt-sessiontype";
var session_types;
(function (session_types) {
    session_types["stateful"] = "stateful";
    session_types["stateless"] = "stateless";
    session_types["keep"] = "";
})(session_types = exports.session_types || (exports.session_types = {}));
class AdtHTTP {
    /**
     * Creates an instance of AdtHTTP.
     * @param {string} baseUrl  Base url, i.e. http://vhcalnplci.local:8000
     * @param {string} username SAP logon user
     * @param {string} password Password
     * @param {string} client   login client
     * @param {string} language login language
     * @param {string} [sslOptions] Custom certificate authority
     * @memberof AdtHTTP
     */
    constructor(baseUrl, username, password, client, language, config = {}) {
        this.client = client;
        this.language = language;
        this.currentSession = session_types.stateless;
        const headers = Object.assign(Object.assign({}, config.headers), { Accept: "*/*", "Cache-Control": "no-cache", withCredentials: true, "x-csrf-token": FETCH_CSRF_TOKEN });
        headers[SESSION_HEADER] = session_types.stateless;
        this.options = Object.assign(Object.assign({}, config), { baseUrl,
            headers, jar: request_1.default.jar() });
        if (typeof password === "string") {
            if (config.debugCallback)
                request_debug_1.default(request_1.default, config.debugCallback);
            if (!(baseUrl && username && password))
                throw new Error("Invalid ADTClient configuration: url, login and password are required");
            this.options.auth = { username, password };
        }
        else {
            this.getToken = password;
            this.userName = username;
        }
    }
    get isStateful() {
        return (this.stateful === session_types.stateful ||
            (this.stateful === session_types.keep &&
                this.currentSession === session_types.stateful));
    }
    get stateful() {
        return this.options.headers[SESSION_HEADER];
    }
    set stateful(stateful) {
        this.options.headers[SESSION_HEADER] = stateful;
    }
    get csrfToken() {
        return this.options.headers[CSRF_TOKEN_HEADER];
    }
    set csrfToken(token) {
        this.options.headers[CSRF_TOKEN_HEADER] = token;
    }
    get loggedin() {
        return this.csrfToken !== FETCH_CSRF_TOKEN;
    }
    get baseUrl() {
        return this.options.baseUrl;
    }
    get username() {
        return (this.userName || (this.options.auth && this.options.auth.username) || "");
    }
    get password() {
        return (this.options.auth && this.options.auth.password) || "";
    }
    /**
     * Logs on an ADT server. parameters provided on creation
     */
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.loginPromise)
                return this.loginPromise;
            // oauth
            if (this.getToken && !this.options.auth)
                yield this.getToken().then(bearer => (this.options.auth = { bearer }));
            const qs = {};
            if (this.client)
                qs["sap-client"] = this.client;
            if (this.language)
                qs["sap-language"] = this.language;
            this.csrfToken = FETCH_CSRF_TOKEN;
            try {
                this.loginPromise = this._request("/sap/bc/adt/compatibility/graph", {
                    qs
                });
                yield this.loginPromise;
            }
            finally {
                this.loginPromise = undefined;
            }
        });
    }
    cookies() {
        const jar = this.options.jar;
        if (jar && jar !== true && this.options.baseUrl)
            return jar.getCookies(this.options.baseUrl);
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            this.stateful = session_types.stateless;
            yield this._request("/sap/public/bc/icf/logoff", {});
            // prevent autologin
            this.options.auth = undefined;
            // new cookie jar
            this.options.jar = request_1.default.jar();
            // clear token
            this.csrfToken = FETCH_CSRF_TOKEN;
        });
    }
    dropSession() {
        return __awaiter(this, void 0, void 0, function* () {
            this.stateful = session_types.stateless;
            yield this._request("/sap/bc/adt/compatibility/graph", {});
        });
    }
    /**
     * HTTP request using default values, and updating cookies/token
     * will login automatically if needed, and try refresh the login (once) if:
     * - expired
     * - stateless (for stateful sessions the client needs to do some cleanup)
     *
     * @param url URL suffix
     * @param config request options
     */
    request(url, config) {
        return __awaiter(this, void 0, void 0, function* () {
            let autologin = false;
            try {
                if (!this.loggedin) {
                    autologin = true;
                    yield this.login();
                }
                return yield this._request(url, config || {});
            }
            catch (e) {
                const adtErr = AdtException_1.fromException(e);
                // if the logon ticket expired try to logon again, unless in stateful mode
                // or already tried a login
                if (AdtException_1.isCsrfError(adtErr) && !autologin && !this.isStateful) {
                    try {
                        yield this.login();
                        return yield this._request(url, config || {});
                    }
                    catch (e2) {
                        throw AdtException_1.fromException(e2);
                    }
                }
                else
                    throw adtErr;
            }
        });
    }
    /**
     * HTTP request without automated login / retry
     *
     * @param url URL suffix
     * @param options request options
     */
    _request(url, options) {
        let headers = this.options.headers || {};
        if (options.headers)
            headers = Object.assign(Object.assign({}, headers), options.headers);
        const uo = Object.assign(Object.assign(Object.assign({}, this.options), options), { headers, url });
        return new Promise((resolve, reject) => {
            request_1.default(uo, (error, response) => __awaiter(this, void 0, void 0, function* () {
                if (error)
                    reject(error);
                else if (response.statusCode < 400) {
                    if (this.csrfToken === FETCH_CSRF_TOKEN) {
                        const newtoken = response.headers[CSRF_TOKEN_HEADER];
                        if (typeof newtoken === "string")
                            this.csrfToken = newtoken;
                    }
                    resolve(response);
                }
                else
                    reject(AdtException_1.fromException(response));
            }));
        });
    }
}
exports.AdtHTTP = AdtHTTP;
