"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUri = exports.uriPartsToString = exports.rangeToString = exports.uriParts = void 0;
const utilities_1 = require("../utilities");
const t = __importStar(require("io-ts"));
const location = t.type({
    line: t.number,
    column: t.number
});
const range = t.type({
    start: location,
    end: location
});
exports.uriParts = t.type({
    uri: t.string,
    query: t.union([t.undefined, t.record(t.string, t.string)]),
    range: range,
    hashparms: t.union([t.undefined, t.record(t.string, t.string)]),
});
const rangeToString = (range) => `#start=${range.start.line},${range.start.column};end=${range.end.line},${range.end.column}`;
exports.rangeToString = rangeToString;
const serializeKv = (r) => {
    const rec = r || {};
    return Object.keys(rec).map(k => `${encodeURIComponent(k)}=${encodeURIComponent(rec[k])}`);
};
const isNullRange = (r) => r.start.line === 0 && r.start.column === 0 && r.end.line === 0 && r.end.column === 0;
const uriPartsToString = (parts) => {
    const range = isNullRange(parts.range) ? "" : (0, exports.rangeToString)(parts.range);
    const parms = serializeKv(parts.hashparms).join(";");
    const query = serializeKv(parts.query).join("&");
    const hash = `${range ? range : ""}${parms ? `${range ? ";" : "#"}${parms}` : ``}`;
    return `${parts.uri}${query ? `?${query}` : ``}${hash}`;
};
exports.uriPartsToString = uriPartsToString;
function parseUri(sourceuri) {
    const [uri, qs, hash] = (0, utilities_1.parts)(sourceuri, /([^\?#]*)(?:\?([^#]*))?(?:#(.*))?/);
    //
    const query = (qs || "").split(/&/).reduce((acc, cur) => {
        const [key, val] = cur.split("=");
        if (key)
            acc[decodeURIComponent(key)] = decodeURIComponent(val);
        return acc;
    }, {});
    const { start, end, ...hashparms } = (hash || "")
        .split(/;/)
        .reduce((acc, cur) => {
        const [key, val] = cur.split("=");
        if (key)
            acc[decodeURIComponent(key)] = decodeURIComponent(val);
        return acc;
    }, {});
    const parsePos = (x) => {
        const [line, column] = x ? x.split(",").map(utilities_1.toInt) : [0, 0];
        return { line: line || 0, column: column || 0 };
    };
    const st = parsePos(start);
    const range = {
        start: st,
        end: end ? parsePos(end) : st
    };
    return { range, uri, query, hashparms };
}
exports.parseUri = parseUri;
