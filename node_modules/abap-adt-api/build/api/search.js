"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.packageSearchHelp = exports.abapDocumentation = exports.findObjectPath = exports.searchObject = void 0;
const AdtException_1 = require("../AdtException");
const utilities_1 = require("../utilities");
function searchObject(h, query, objType, maxResults = 100) {
    return __awaiter(this, void 0, void 0, function* () {
        const qs = { operation: "quickSearch", query, maxResults };
        if (objType)
            qs.objectType = objType.replace(/\/.*$/, "");
        const response = yield h.request(`/sap/bc/adt/repository/informationsystem/search`, { qs, headers: { Accept: "application/*" } });
        const raw = utilities_1.fullParse(response.body);
        return utilities_1.xmlArray(raw, "adtcore:objectReferences", "adtcore:objectReference").map((sr) => {
            const result = utilities_1.xmlNodeAttr(sr);
            // older systems return things like "ZREPORT (PROGRAM)"...
            const r = result["adtcore:name"].match(/([^\s]*)\s*\((.*)\)/);
            if (r) {
                result["adtcore:name"] = r[1];
                if (!result["adtcore:description"])
                    result["adtcore:description"] = r[2];
            }
            return result;
        });
    });
}
exports.searchObject = searchObject;
function findObjectPath(h, objectUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        AdtException_1.ValidateObjectUrl(objectUrl);
        const qs = { uri: objectUrl };
        const response = yield h.request(`/sap/bc/adt/repository/nodepath`, {
            method: "POST",
            qs
        });
        const raw = utilities_1.fullParse(response.body);
        return utilities_1.xmlArray(raw, "projectexplorer:nodepath", "projectexplorer:objectLinkReferences", "objectLinkReference").map(utilities_1.xmlNodeAttr);
    });
}
exports.findObjectPath = findObjectPath;
function abapDocumentation(h, objectUri, body, line, column, language = "EN") {
    return __awaiter(this, void 0, void 0, function* () {
        AdtException_1.ValidateObjectUrl(objectUri);
        const headers = {
            "Content-Type": "text/plain",
            Accept: "application/vnd.sap.adt.docu.v1+html,text/html"
        };
        const uri = `${objectUri}#start=${line},${column}`;
        const qs = { uri, language, format: "eclipse" };
        const response = yield h.request(`/sap/bc/adt/docu/abap/langu`, {
            method: "POST",
            qs,
            headers,
            body
        });
        return response.body;
    });
}
exports.abapDocumentation = abapDocumentation;
function packageSearchHelp(h, type, name = "*") {
    return __awaiter(this, void 0, void 0, function* () {
        const headers = { Accept: "application/*" };
        const qs = { name };
        const uri = `/sap/bc/adt/packages/valuehelps/${type}`;
        const response = yield h.request(uri, { qs, headers });
        const raw = utilities_1.fullParse(response.body);
        return utilities_1.xmlArray(raw, "nameditem:namedItemList", "nameditem:namedItem").map((item) => {
            return {
                name: item["nameditem:name"],
                description: item["nameditem:description"],
                data: item["nameditem:data"]
            };
        });
    });
}
exports.packageSearchHelp = packageSearchHelp;
