"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeContents = exports.isNodeParent = void 0;
const fast_xml_parser_1 = require("fast-xml-parser");
const utilities_1 = require("../utilities");
function isNodeParent(t) {
    return t === "DEVC/K" || t === "PROG/P" || t === "FUGR/F" || t === "PROG/PI";
}
exports.isNodeParent = isNodeParent;
const parsePackageResponse = (data) => {
    let nodes = [];
    let categories = [];
    let objectTypes = [];
    if (data) {
        const xml = fast_xml_parser_1.parse(data);
        const root = xml["asx:abap"]["asx:values"].DATA;
        nodes = utilities_1.xmlArray(root, "TREE_CONTENT", "SEU_ADT_REPOSITORY_OBJ_NODE");
        for (const node of nodes)
            if (!utilities_1.isString(node.OBJECT_NAME)) {
                node.OBJECT_NAME = (node.OBJECT_NAME || "").toString();
                node.TECH_NAME = (node.TECH_NAME || "").toString();
            }
        categories = utilities_1.xmlArray(root, "CATEGORIES", "SEU_ADT_OBJECT_CATEGORY_INFO");
        objectTypes = utilities_1.xmlArray(root, "OBJECT_TYPES", "SEU_ADT_OBJECT_TYPE_INFO");
    }
    return {
        categories,
        nodes,
        objectTypes
    };
};
// tslint:disable: variable-name
function nodeContents(h, parent_type, parent_name, user_name, parent_tech_name) {
    return __awaiter(this, void 0, void 0, function* () {
        const qs = {
            parent_type,
            withShortDescriptions: true
        };
        if (parent_name)
            qs.parent_name = parent_name;
        if (parent_tech_name)
            qs.parent_tech_name = parent_tech_name;
        if (user_name)
            qs.user_name = user_name;
        const response = yield h.request("/sap/bc/adt/repository/nodestructure", {
            method: "POST",
            qs
        });
        return parsePackageResponse(response.body);
    });
}
exports.nodeContents = nodeContents;
