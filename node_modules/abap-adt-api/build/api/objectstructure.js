"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.objectStructure = exports.isClassStructure = exports.isClassMetaData = void 0;
const AdtException_1 = require("../AdtException");
const utilities_1 = require("../utilities");
function isClassMetaData(meta) {
    return meta["class:visibility"] !== undefined;
}
exports.isClassMetaData = isClassMetaData;
function isClassStructure(struc) {
    return isClassMetaData(struc.metaData);
}
exports.isClassStructure = isClassStructure;
const convertIncludes = (i) => {
    const imeta = utilities_1.xmlNodeAttr(i);
    const links = i["atom:link"].map(utilities_1.xmlNodeAttr);
    return Object.assign(Object.assign({}, imeta), { links });
};
function objectStructure(h, objectUrl) {
    return __awaiter(this, void 0, void 0, function* () {
        AdtException_1.ValidateObjectUrl(objectUrl);
        const response = yield h.request(objectUrl);
        const res = utilities_1.fullParse(response.body);
        // return type depends on object type, but always have a single root
        const root = utilities_1.xmlRoot(res);
        const attr = utilities_1.xmlNodeAttr(root);
        attr["adtcore:changedAt"] = Date.parse(attr["adtcore:changedAt"]) || 0;
        attr["adtcore:createdAt"] = Date.parse(attr["adtcore:createdAt"]) || 0;
        const links = utilities_1.xmlArray(root, "atom:link").map(utilities_1.xmlNodeAttr);
        const metaData = attr;
        if (isClassMetaData(metaData)) {
            const includes = utilities_1.xmlArray(root, "class:include").map(convertIncludes);
            return { objectUrl, metaData, includes, links };
        }
        return { objectUrl, metaData, links };
    });
}
exports.objectStructure = objectStructure;
