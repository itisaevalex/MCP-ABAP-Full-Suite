"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.revisions = exports.getRevisionLink = void 0;
const AdtException_1 = require("../AdtException");
const utilities_1 = require("../utilities");
const objectstructure_1 = require("./objectstructure");
function extractRevisionLink(links) {
    return links.find(l => l.rel === "http://www.sap.com/adt/relations/versions");
}
function getRevisionLink(struct, includeName) {
    let link;
    if (objectstructure_1.isClassStructure(struct)) {
        const iname = includeName || "main";
        const include = struct.includes.find(i => i["class:includeType"] === iname);
        if (include)
            link = extractRevisionLink(include.links);
    }
    else {
        link = extractRevisionLink(struct.links);
    }
    if (link)
        return utilities_1.followUrl(struct.objectUrl, link.href);
    return "";
}
exports.getRevisionLink = getRevisionLink;
const extractVersion = (entry) => {
    const ADTTYPE = "application/vnd.sap.adt.transportrequests.v1+xml";
    const base = utilities_1.xmlNode(entry, "atom:link");
    if (Array.isArray(base)) {
        const vlink = base.find(l => l["@_type"] === ADTTYPE) || base[0];
        return utilities_1.xmlNode(vlink, "@_adtcore:name") || "";
    }
    else
        return utilities_1.xmlNode(base, "@_adtcore:name") || "";
};
function revisions(h, objectUrl, includeName) {
    return __awaiter(this, void 0, void 0, function* () {
        const str = utilities_1.isString(objectUrl)
            ? yield objectstructure_1.objectStructure(h, objectUrl)
            : objectUrl;
        const name = str.metaData["adtcore:name"];
        const revisionUrl = getRevisionLink(str, includeName);
        if (!revisionUrl)
            throw AdtException_1.adtException(`Revision URL not found for object ${name}`);
        const headers = { Accept: "application/atom+xml;type=feed" };
        const response = yield h.request(revisionUrl, {
            method: "GET",
            headers
        });
        const raw = utilities_1.fullParse(response.body);
        const versions = utilities_1.xmlArray(raw, "atom:feed", "atom:entry").map((entry) => {
            const uri = utilities_1.xmlNode(entry, "atom:content", "@_src") || "";
            const version = extractVersion(entry);
            const versionTitle = utilities_1.xmlNode(entry, "atom:title") || "";
            const date = utilities_1.xmlNode(entry, "atom:updated") || "";
            const author = utilities_1.xmlNode(entry, "atom:author", "atom:name");
            const r = { uri, version, versionTitle, date, author };
            return r;
        });
        return versions;
    });
}
exports.revisions = revisions;
