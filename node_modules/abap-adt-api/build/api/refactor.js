"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renameExecute = exports.renamePreview = exports.renameEvaluate = exports.fixEdits = exports.fixProposals = void 0;
const _1 = require(".");
const AdtException_1 = require("../AdtException");
const utilities_1 = require("../utilities");
const urlparser_1 = require("./urlparser");
function fixProposals(h, uri, body, line, column) {
    return __awaiter(this, void 0, void 0, function* () {
        const qs = { uri: `${uri}#start=${line},${column}` };
        const headers = { "Content-Type": "application/*", Accept: "application/*" };
        const response = yield h.request("/sap/bc/adt/quickfixes/evaluation", {
            method: "POST",
            qs,
            headers,
            body
        });
        const raw = utilities_1.fullParse(response.body);
        const rawResults = utilities_1.xmlArray(raw, "qf:evaluationResults", "evaluationResult");
        return rawResults.map(x => {
            const attrs = utilities_1.xmlNodeAttr(utilities_1.xmlNode(x, "adtcore:objectReference"));
            const userContent = utilities_1.decodeEntity(utilities_1.xmlNode(x, "userContent") || "");
            return Object.assign(Object.assign({}, attrs), { "adtcore:name": utilities_1.decodeEntity(attrs["adtcore:name"]), "adtcore:description": utilities_1.decodeEntity(attrs["adtcore:description"]), uri,
                line,
                column,
                userContent });
        });
    });
}
exports.fixProposals = fixProposals;
function fixEdits(h, proposal, source) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!proposal["adtcore:uri"].match(/\/sap\/bc\/adt\/quickfixes/))
            throw AdtException_1.adtException("Invalid fix proposal");
        const body = `<?xml version="1.0" encoding="UTF-8"?>
  <quickfixes:proposalRequest xmlns:quickfixes="http://www.sap.com/adt/quickfixes"
     xmlns:adtcore="http://www.sap.com/adt/core">
    <input>
      <content>${utilities_1.encodeEntity(source)}</content>
      <adtcore:objectReference adtcore:uri="${proposal.uri}#start=${proposal.line},${proposal.column}"/>
    </input>
    <userContent>${utilities_1.encodeEntity(proposal.userContent)}</userContent>
  </quickfixes:proposalRequest>`;
        const headers = { "Content-Type": "application/*", Accept: "application/*" };
        const response = yield h.request(proposal["adtcore:uri"], {
            method: "POST",
            headers,
            body
        });
        const raw = utilities_1.fullParse(response.body);
        const parseDelta = (d) => {
            const attr = utilities_1.xmlNodeAttr(utilities_1.xmlNode(d, "adtcore:objectReference"));
            const content = utilities_1.decodeEntity(d.content);
            const { uri, range } = urlparser_1.parseUri(attr["adtcore:uri"]);
            return {
                uri,
                range,
                name: attr["adtcore:name"],
                type: attr["adtcore:type"],
                content
            };
        };
        const deltas = utilities_1.xmlArray(raw, "qf:proposalResult", "deltas", "unit").map(parseDelta);
        return deltas;
    });
}
exports.fixEdits = fixEdits;
function parseRenameRefactoring(body) {
    const raw = utilities_1.fullParse(body, { ignoreNameSpace: true });
    const root = utilities_1.xmlNode(raw, "renameRefactoring");
    const generic = utilities_1.xmlNode(root || raw, "genericRefactoring"); // depending on the caller the generic refactoring might be wrapped or not
    const affectedObjects = utilities_1.xmlArray(generic, "affectedObjects");
    const userContent = utilities_1.decodeEntity(utilities_1.xmlNode(generic, "userContent") || "");
    const adtObjectUri = urlparser_1.parseUri(utilities_1.decodeEntity(utilities_1.xmlNode(generic, "adtObjectUri") || ""));
    return {
        oldName: utilities_1.decodeEntity(utilities_1.xmlNode(root, "oldName") || ""),
        newName: utilities_1.decodeEntity(utilities_1.xmlNode(root, "newName") || ""),
        adtObjectUri,
        ignoreSyntaxErrorsAllowed: generic["ignoreSyntaxErrorsAllowed"],
        ignoreSyntaxErrors: generic["ignoreSyntaxErrors"],
        transport: "",
        affectedObjects: affectedObjects.map(y => {
            const replacedelta = utilities_1.xmlArray(y, "affectedObject", "textReplaceDeltas", "textReplaceDelta");
            const affectedObject = utilities_1.xmlNodeAttr(utilities_1.xmlNode(y, "affectedObject"));
            return {
                uri: utilities_1.decodeEntity(utilities_1.xmlNode(affectedObject, "uri")),
                type: utilities_1.decodeEntity(utilities_1.xmlNode(affectedObject, "type")),
                name: utilities_1.decodeEntity(utilities_1.xmlNode(affectedObject, "name")),
                parentUri: utilities_1.decodeEntity(utilities_1.xmlNode(affectedObject, "parentUri")),
                textReplaceDeltas: replacedelta.map(z => {
                    return {
                        rangeFragment: urlparser_1.parseUri(utilities_1.decodeEntity(utilities_1.xmlNode(z, "rangeFragment"))).range,
                        contentOld: utilities_1.decodeEntity(utilities_1.xmlNode(z, "contentOld")),
                        contentNew: utilities_1.decodeEntity(utilities_1.xmlNode(z, "contentNew"))
                    };
                }),
                userContent: utilities_1.decodeEntity(utilities_1.xmlNode(y, "affectedObject", "userContent") || ""),
            };
        }),
        userContent: userContent
    };
}
function renameEvaluate(h, uri, line, startColumn, endColumn) {
    return __awaiter(this, void 0, void 0, function* () {
        const qs = {
            step: `evaluate`,
            rel: `http://www.sap.com/adt/relations/refactoring/rename`,
            uri: `${uri}#start=${line},${startColumn};end=${line},${endColumn}`
        };
        const headers = { "Content-Type": "application/*", Accept: "application/*" };
        const response = yield h.request("/sap/bc/adt/refactorings", {
            method: "POST",
            qs: qs,
            headers: headers,
        });
        return parseRenameRefactoring(response.body);
    });
}
exports.renameEvaluate = renameEvaluate;
const srializeRefactoring = (renameRefactoring, wrapped, transport = "") => {
    const start = wrapped ? `<rename:renameRefactoring xmlns:adtcore="http://www.sap.com/adt/core" xmlns:generic="http://www.sap.com/adt/refactoring/genericrefactoring" 
  xmlns:rename="http://www.sap.com/adt/refactoring/renamerefactoring">
  <rename:oldName>${renameRefactoring.oldName}</rename:oldName>
  <rename:newName>${renameRefactoring.newName}</rename:newName>`
        : "";
    const end = wrapped ? `<rename:userContent/></rename:renameRefactoring>` : "";
    const genns = wrapped ? "" : ` xmlns:generic="http://www.sap.com/adt/refactoring/genericrefactoring" xmlns:adtcore="http://www.sap.com/adt/core"`;
    const addAffectedObjects = (affectedObject) => affectedObject.map(z => `<generic:affectedObject adtcore:name="${z.name}" adtcore:parentUri="${z.parentUri}" adtcore:type="${z.type}" adtcore:uri="${z.uri}">
        <generic:textReplaceDeltas>
          ${z.textReplaceDeltas.map(y => {
        return `<generic:textReplaceDelta>
            <generic:rangeFragment>${_1.rangeToString(y.rangeFragment)}</generic:rangeFragment>
            <generic:contentOld>${y.contentOld}</generic:contentOld>
            <generic:contentNew>${y.contentNew}</generic:contentNew>
          </generic:textReplaceDelta>`;
    }).join('')}
          </generic:textReplaceDeltas>
        <generic:userContent>${z.userContent}</generic:userContent>
      </generic:affectedObject>`);
    const bodyXml = `<?xml version="1.0" encoding="ASCII"?>
  ${start}
    <generic:genericRefactoring ${genns}>
      <generic:title>Rename Field</generic:title>
      <generic:adtObjectUri>${renameRefactoring.adtObjectUri.uri}${_1.rangeToString(renameRefactoring.adtObjectUri.range)}</generic:adtObjectUri>
      <generic:affectedObjects>
        ${addAffectedObjects(renameRefactoring.affectedObjects).join('')}
      </generic:affectedObjects>
      <generic:transport>${renameRefactoring.transport || transport}</generic:transport>
      <generic:ignoreSyntaxErrorsAllowed>${renameRefactoring.ignoreSyntaxErrorsAllowed}</generic:ignoreSyntaxErrorsAllowed>
      <generic:ignoreSyntaxErrors>${renameRefactoring.ignoreSyntaxErrors}</generic:ignoreSyntaxErrors>
      <generic:userContent/>
    </generic:genericRefactoring>
    ${end}`;
    return bodyXml;
};
function renamePreview(h, renameRefactoring, transport) {
    return __awaiter(this, void 0, void 0, function* () {
        const qs = {
            step: `preview`,
            rel: `http://www.sap.com/adt/relations/refactoring/rename`,
        };
        const bodyXml = srializeRefactoring(renameRefactoring, true, transport);
        const headers = { "Content-Type": "application/*", Accept: "application/*" };
        const response = yield h.request("/sap/bc/adt/refactorings", {
            method: "POST",
            qs: qs,
            body: bodyXml,
            headers: headers,
        });
        const parsed = parseRenameRefactoring(response.body);
        return Object.assign(Object.assign({}, parsed), { transport: parsed.transport || transport });
    });
}
exports.renamePreview = renamePreview;
function renameExecute(h, rename) {
    return __awaiter(this, void 0, void 0, function* () {
        const qs = {
            step: `execute`
        };
        const headers = { "Content-Type": "application/*", Accept: "application/*" };
        const body = srializeRefactoring(rename, false);
        const response = yield h.request("/sap/bc/adt/refactorings", {
            method: "POST",
            qs: qs,
            body,
            headers: headers,
        });
        const result = parseRenameRefactoring(response.body);
        return Object.assign(Object.assign({}, result), { transport: result.transport || rename.transport });
    });
}
exports.renameExecute = renameExecute;
