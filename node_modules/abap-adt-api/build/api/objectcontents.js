"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unLock = exports.lock = exports.setObjectSource = exports.getObjectSource = void 0;
const fast_xml_parser_1 = require("fast-xml-parser");
const AdtException_1 = require("../AdtException");
const utilities_1 = require("../utilities");
function getObjectSource(h, objectSourceUrl, gitUser, gitPassword) {
    return __awaiter(this, void 0, void 0, function* () {
        AdtException_1.ValidateObjectUrl(objectSourceUrl);
        const headers = {};
        if (gitUser)
            headers.Username = gitUser;
        if (gitPassword)
            headers.Password = utilities_1.btoa(gitPassword);
        const response = yield h.request(objectSourceUrl, { headers });
        return response.body;
    });
}
exports.getObjectSource = getObjectSource;
function setObjectSource(h, objectSourceUrl, source, lockHandle, transport) {
    return __awaiter(this, void 0, void 0, function* () {
        AdtException_1.ValidateObjectUrl(objectSourceUrl);
        AdtException_1.ValidateStateful(h);
        const qs = { lockHandle };
        const ctype = source.match(/^<\?xml\s/i) ? "application/*" : "text/plain; charset=utf-8";
        if (transport)
            qs.corrNr = transport;
        yield h.request(objectSourceUrl, {
            body: source,
            headers: { "content-type": ctype },
            method: "PUT",
            qs
        });
    });
}
exports.setObjectSource = setObjectSource;
function lock(h, objectUrl, accessMode = "MODIFY") {
    return __awaiter(this, void 0, void 0, function* () {
        AdtException_1.ValidateObjectUrl(objectUrl);
        AdtException_1.ValidateStateful(h);
        const qs = { _action: "LOCK", accessMode };
        const response = yield h.request(objectUrl, {
            headers: {
                Accept: "application/*,application/vnd.sap.as+xml;charset=UTF-8;dataname=com.sap.adt.lock.result"
            },
            method: "POST",
            qs
        });
        const raw = fast_xml_parser_1.parse(response.body);
        const locks = utilities_1.xmlArray(raw, "asx:abap", "asx:values", "DATA");
        return locks[0];
    });
}
exports.lock = lock;
function unLock(h, objectUrl, lockHandle) {
    return __awaiter(this, void 0, void 0, function* () {
        AdtException_1.ValidateObjectUrl(objectUrl);
        const qs = {
            _action: "UNLOCK",
            lockHandle: encodeURIComponent(lockHandle)
        };
        const response = yield h.request(objectUrl, {
            method: "POST",
            qs
        });
        return response.body;
    });
}
exports.unLock = unLock;
