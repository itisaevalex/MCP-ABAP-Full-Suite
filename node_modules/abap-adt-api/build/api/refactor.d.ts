import { UriParts } from ".";
import { AdtHTTP } from "../AdtHTTP";
import { Range } from "./urlparser";
export interface FixProposal {
    "adtcore:uri": string;
    "adtcore:type": string;
    "adtcore:name": string;
    "adtcore:description": string;
    uri: string;
    line: string;
    column: string;
    userContent: string;
}
interface TextReplaceDelta {
    rangeFragment: Range;
    contentOld: string;
    contentNew: string;
}
interface AffectedObjects {
    uri: string;
    type: string;
    name: string;
    parentUri: string;
    userContent: string;
    textReplaceDeltas: TextReplaceDelta[];
}
export interface RenameRefactoringProposal {
    oldName: string;
    newName: string;
    transport?: string;
    title?: string;
    rootUserContent?: string;
    ignoreSyntaxErrorsAllowed: string;
    ignoreSyntaxErrors: string;
    adtObjectUri: UriParts;
    affectedObjects: AffectedObjects[];
    userContent: string;
}
export interface RenameRefactoring extends RenameRefactoringProposal {
    transport: string;
}
export declare function fixProposals(h: AdtHTTP, uri: string, body: string, line: number, column: number): Promise<FixProposal[]>;
export interface Delta {
    uri: string;
    range: Range;
    name: string;
    type: string;
    content: string;
}
export declare function fixEdits(h: AdtHTTP, proposal: FixProposal, source: string): Promise<Delta[]>;
export declare function renameEvaluate(h: AdtHTTP, uri: string, line: number, startColumn: number, endColumn: number): Promise<RenameRefactoringProposal>;
export declare function renamePreview(h: AdtHTTP, renameRefactoring: RenameRefactoringProposal, transport: string): Promise<RenameRefactoring>;
export declare function renameExecute(h: AdtHTTP, rename: RenameRefactoring): Promise<RenameRefactoring>;
export {};
//# sourceMappingURL=refactor.d.ts.map