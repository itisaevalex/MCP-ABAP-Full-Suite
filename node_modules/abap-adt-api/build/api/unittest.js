"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runUnitTest = exports.UnitTestSeverity = exports.UnitTestAlertKind = void 0;
const utilities_1 = require("../utilities");
var UnitTestAlertKind;
(function (UnitTestAlertKind) {
    UnitTestAlertKind["exception"] = "exception";
    UnitTestAlertKind["failedAssertion"] = "failedAssertion";
    UnitTestAlertKind["warning"] = "warning";
})(UnitTestAlertKind = exports.UnitTestAlertKind || (exports.UnitTestAlertKind = {}));
var UnitTestSeverity;
(function (UnitTestSeverity) {
    UnitTestSeverity["critical"] = "critical";
    UnitTestSeverity["fatal"] = "fatal";
    UnitTestSeverity["tolerable"] = "tolerable";
    UnitTestSeverity["tolerant"] = "tolerant";
})(UnitTestSeverity = exports.UnitTestSeverity || (exports.UnitTestSeverity = {}));
function runUnitTest(h, url) {
    return __awaiter(this, void 0, void 0, function* () {
        const headers = { "Content-Type": "application/*", Accept: "application/*" };
        const body = `<?xml version="1.0" encoding="UTF-8"?>
  <aunit:runConfiguration xmlns:aunit="http://www.sap.com/adt/aunit">
  <external>
    <coverage active="false"/>
  </external>
  <options>
    <uriType value="semantic"/>
    <testDeterminationStrategy sameProgram="true" assignedTests="false"/>
  </options>
  <adtcore:objectSets xmlns:adtcore="http://www.sap.com/adt/core">
    <objectSet kind="inclusive">
      <adtcore:objectReferences>
        <adtcore:objectReference adtcore:uri="${url}"/>
      </adtcore:objectReferences>
    </objectSet>
  </adtcore:objectSets>
</aunit:runConfiguration>`;
        const response = yield h.request("/sap/bc/adt/abapunit/testruns", {
            method: "POST",
            headers,
            body
        });
        const raw = utilities_1.fullParse(response.body);
        const parseDetail = (alert) => utilities_1.xmlArray(alert, "details", "detail").reduce((result, d) => {
            const main = utilities_1.decodeEntity((d && d["@_text"]) || "");
            const children = utilities_1.xmlArray(d, "details", "detail")
                .map((dd) => (dd && `\n\t${dd["@_text"]}`) || "")
                .join("");
            return main ? [...result, main + children] : result;
        }, []);
        const parseStack = (alert) => utilities_1.xmlArray(alert, "stack", "stackEntry").map(x => {
            const entry = utilities_1.xmlNodeAttr(x);
            entry["adtcore:description"] = utilities_1.decodeEntity(entry["adtcore:description"]);
            return entry;
        });
        const parseAlert = (alert) => (Object.assign(Object.assign({}, utilities_1.xmlNodeAttr(alert)), { details: parseDetail(alert), stack: parseStack(alert) }));
        const parseMethod = (method) => (Object.assign(Object.assign({}, utilities_1.xmlNodeAttr(method)), { alerts: utilities_1.xmlArray(method, "alerts", "alert").map(parseAlert) }));
        const classes = utilities_1.xmlFlatArray(raw, "aunit:runResult", "program", "testClasses", "testClass").map(c => {
            return Object.assign(Object.assign({}, utilities_1.xmlNodeAttr(c)), { alerts: utilities_1.xmlArray(c, "alerts", "alert").map(parseAlert), testmethods: utilities_1.xmlFlatArray(c, "testMethods", "testMethod").map(parseMethod) });
        });
        return classes;
    });
}
exports.runUnitTest = runUnitTest;
