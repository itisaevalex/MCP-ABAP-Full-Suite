import { CoreOptions, Request, RequiredUriUrl, Response } from "request";
import { Cookie } from "tough-cookie";
import { LogCallback } from "request-debug";
export declare enum session_types {
    stateful = "stateful",
    stateless = "stateless",
    keep = ""
}
export interface ClientOptions extends CoreOptions {
    debugCallback?: LogCallback<Request, CoreOptions, RequiredUriUrl>;
}
export declare type BearerFetcher = () => Promise<string>;
export declare class AdtHTTP {
    readonly client: string;
    readonly language: string;
    private options;
    private loginPromise?;
    private getToken?;
    private userName?;
    get isStateful(): boolean;
    private currentSession;
    get stateful(): session_types;
    set stateful(stateful: session_types);
    get csrfToken(): string;
    set csrfToken(token: string);
    get loggedin(): boolean;
    get baseUrl(): string;
    get username(): string;
    get password(): string;
    /**
     * Creates an instance of AdtHTTP.
     * @param {string} baseUrl  Base url, i.e. http://vhcalnplci.local:8000
     * @param {string} username SAP logon user
     * @param {string} password Password
     * @param {string} client   login client
     * @param {string} language login language
     * @param {string} [sslOptions] Custom certificate authority
     * @memberof AdtHTTP
     */
    constructor(baseUrl: string, username: string, password: string | BearerFetcher, client: string, language: string, config?: ClientOptions);
    /**
     * Logs on an ADT server. parameters provided on creation
     */
    login(): Promise<any>;
    cookies(): Cookie[] | undefined;
    logout(): Promise<void>;
    dropSession(): Promise<void>;
    /**
     * HTTP request using default values, and updating cookies/token
     * will login automatically if needed, and try refresh the login (once) if:
     * - expired
     * - stateless (for stateful sessions the client needs to do some cleanup)
     *
     * @param url URL suffix
     * @param config request options
     */
    request(url: string, config?: CoreOptions): Promise<Response>;
    /**
     * HTTP request without automated login / retry
     *
     * @param url URL suffix
     * @param options request options
     */
    private _request;
}
//# sourceMappingURL=AdtHTTP.d.ts.map